/* The following code was generated by JFlex 1.3.5 on 7/6/19, 12:52 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 7/6/19, 12:52 PM from the specification file
 * <tt>file:/E:/JavaWorkspace/compiler-project/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int STRING = 2;
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\24"+
    "\1\15\2\0\1\56\1\57\1\60\1\61\1\54\1\10\1\62\1\4"+
    "\1\11\1\20\12\5\1\55\1\63\1\21\1\17\1\22\2\0\4\12"+
    "\1\13\1\12\24\16\1\0\1\23\2\0\1\6\1\0\1\25\1\26"+
    "\1\33\1\37\1\7\1\14\1\42\1\47\1\36\1\16\1\51\1\35"+
    "\1\45\1\40\1\27\1\34\1\52\1\30\1\32\1\31\1\44\1\50"+
    "\1\46\1\43\1\41\1\53\1\0\1\64\uff83\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    53,   106,   159,   212,   159,   265,   318,   371,   159, 
      424,   477,   530,   583,   636,   689,   742,   159,   795,   848, 
      901,   954,  1007,  1060,  1113,  1166,  1219,  1272,  1325,  1378, 
     1431,  1484,  1537,  1590,  1643,  1696,  1749,   159,   159,   159, 
      159,   159,   159,   159,  1802,  1855,   159,  1908,  1961,  2014, 
     2067,  2120,  2173,  2226,  2279,  2332,   159,  2385,  2438,  2491, 
     2544,   159,   159,   159,   159,  2597,  2650,   477,  2703,  2756, 
     2809,  2862,  2915,   477,   477,  2968,  3021,  3074,  3127,  3180, 
     3233,  3286,  3339,  3392,  3445,  3498,  3551,  3604,  3657,  3710, 
     3763,  3816,  3869,  3922,  3975,  4028,  4081,   477,   477,  4134, 
     4187,   477,  4240,  4293,  4346,  4399,  4452,  4505,  4558,  4611, 
     4664,  4717,  4770,  4823,   159,   159,   159,   159,   159,   159, 
      159,   159,   159,   159,  4876,  4929,  4982,  5035,  5088,  5141, 
      477,  5194,  5247,  5300,   477,  5353,  5406,  5459,  5512,  5565, 
     5618,   477,  5671,   477,  5724,  5777,  5830,  5883,   477,  5936, 
     5989,  6042,  6095,   477,  6148,  6201,  6254,  6307,  6360,  6413, 
     6466,  6519,  6572,  6625,  6678,  6731,  6784,  6837,  6890,  6943, 
     6996,  7049,  7102,  7155,  7208,  7261,   477,  7314,  7367,  7420, 
     7473,  7526,  7579,   477,   477,  7632,   477,  7685,  7738,   477, 
      477,  7791,   477,  7844,  7897,  7950,  8003,  8056,   477,  8109, 
     8162,  8215,   477,  8268,  8321,  8374,  8427,  8480,  8533,  8586, 
     8639,  8692,  8745,   477,  8798,  8851,  8904,  8957,  9010,  9063, 
     9116,  9169,  9222,  9275,   477,  9328,   477,   477,   477,  9381, 
     9434,  9487,  9540,  9593,   477,  9646,  9699,  9752,  9805,  9858, 
     9911,  9964,   477, 10017, 10070, 10123, 10176, 10229, 10282,   477, 
    10335,   477, 10388,   477,   477, 10441, 10494, 10547,   477,   477, 
    10600,   477,   477, 10653,   477, 10706,   477, 10759, 10812, 10865, 
      477, 10918, 10971, 11024, 11077, 11130, 11183, 11236, 11289,   477, 
      477, 11342, 11395, 11448, 11501, 11554, 11607, 11660, 11713, 11766, 
    11819, 11872, 11925, 11978, 12031, 12084, 12137, 12190, 12243,   477, 
      477, 12296, 12349,   477,   477, 12402, 12455, 12508, 12561, 12614, 
      477,   477, 12667, 12720,   477, 12773,   477,   477, 12826, 12879, 
    12932, 12985,   477, 13038,   477,   477, 13091, 13144, 13197, 13250, 
    13303,   477, 13356, 13409, 13462, 13515, 13568, 13621, 13674,   477, 
    13727, 13780, 13833, 13886,   477,   477, 13939,   477,   477,   477, 
    13992, 14045, 14098,   477, 14151, 14204,   477, 14257, 14310,   477, 
      477, 14363,   477,   477,   477, 14416,   477,   477, 14469, 14522, 
      477, 14575,   477, 14628, 14681, 14734, 14787,   477, 14840,   477, 
    14893,   477,   477,   477,   477,   477, 14946, 14999,   477
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\4\1\5\2\6\1\7\1\10\1\4\1\11\1\12"+
    "\1\13\2\14\1\15\1\4\1\14\1\16\1\17\1\20"+
    "\1\21\1\4\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\14"+
    "\1\37\1\40\1\41\1\42\1\43\5\14\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\65\4"+
    "\1\55\2\4\20\55\1\56\1\57\40\55\67\0\1\6"+
    "\66\0\1\60\65\0\1\10\1\61\1\62\1\0\1\63"+
    "\1\0\1\62\1\0\1\64\54\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\10\14\1\66\2\14"+
    "\1\67\2\14\1\70\10\14\22\0\1\71\60\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\27\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\1\72\1\14\1\73\5\14\1\74\6\14\1\75"+
    "\7\14\33\0\1\76\61\0\1\77\64\0\1\77\1\0"+
    "\1\100\62\0\1\77\2\0\1\101\47\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\6\0\1\14\1\102"+
    "\1\14\1\103\1\104\1\14\1\105\1\14\1\106\2\14"+
    "\1\107\13\14\16\0\1\14\1\65\1\110\2\0\3\14"+
    "\1\0\1\14\6\0\2\14\1\111\24\14\16\0\1\14"+
    "\1\65\1\14\2\0\2\14\1\112\1\0\1\14\6\0"+
    "\3\14\1\113\1\114\12\14\1\115\3\14\1\116\3\14"+
    "\16\0\1\14\1\65\1\117\2\0\3\14\1\0\1\14"+
    "\6\0\1\120\26\14\16\0\1\14\1\65\1\121\2\0"+
    "\3\14\1\0\1\14\6\0\1\122\2\14\1\123\10\14"+
    "\1\124\5\14\1\125\4\14\16\0\1\14\1\65\1\126"+
    "\2\0\3\14\1\0\1\14\6\0\4\14\1\127\7\14"+
    "\1\130\2\14\1\131\7\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\1\132\1\14\1\133"+
    "\17\14\1\134\4\14\16\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\6\0\1\135\2\14\1\136\13\14"+
    "\1\137\7\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\2\14\1\140\6\14\1\141\15\14"+
    "\16\0\1\14\1\65\1\14\2\0\2\14\1\142\1\0"+
    "\1\14\6\0\5\14\1\143\5\14\1\144\13\14\16\0"+
    "\1\14\1\65\1\145\2\0\3\14\1\0\1\14\6\0"+
    "\2\14\1\146\6\14\1\147\15\14\16\0\1\14\1\65"+
    "\1\150\2\0\3\14\1\0\1\14\6\0\2\14\1\151"+
    "\14\14\1\152\7\14\16\0\1\14\1\65\1\153\2\0"+
    "\3\14\1\0\1\14\6\0\2\14\1\154\24\14\16\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\6\0"+
    "\2\14\1\155\24\14\16\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\6\0\5\14\1\156\5\14\1\157"+
    "\13\14\16\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\6\0\2\14\1\160\24\14\16\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\6\0\11\14\1\161"+
    "\10\14\1\162\4\14\65\0\1\163\27\0\1\164\45\0"+
    "\1\55\2\0\20\55\2\0\40\55\2\165\1\0\11\165"+
    "\1\166\6\165\1\167\1\170\1\165\1\171\1\165\1\172"+
    "\1\173\6\165\1\174\24\165\1\60\2\0\62\60\5\0"+
    "\1\10\63\0\1\175\1\176\2\0\1\175\61\0\1\177"+
    "\64\0\1\200\1\0\1\200\2\0\3\200\10\0\2\200"+
    "\4\0\1\200\3\0\1\200\32\0\1\14\1\0\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\27\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\5\14"+
    "\1\201\21\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\4\14\1\202\5\14\1\203\14\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\6\14\1\204\2\14\1\205\15\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\10\14"+
    "\1\206\16\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\3\14\1\207\23\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\2\14"+
    "\1\210\24\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\13\14\1\211\13\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\2\14"+
    "\1\212\2\14\1\213\21\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\3\14\1\214\23\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\6\14\1\215\20\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\10\14\1\216\1\217"+
    "\15\14\16\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\6\0\12\14\1\220\14\14\16\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\6\0\15\14\1\221"+
    "\11\14\16\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\6\0\2\14\1\222\7\14\1\223\14\14\16\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\6\0"+
    "\22\14\1\224\4\14\16\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\6\0\4\14\1\225\22\14\16\0"+
    "\1\14\1\65\1\226\2\0\3\14\1\0\1\14\6\0"+
    "\27\14\16\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\6\0\4\14\1\227\1\14\1\230\4\14\1\231"+
    "\4\14\1\232\2\14\1\233\1\14\1\234\1\14\16\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\6\0"+
    "\11\14\1\235\1\14\1\236\13\14\16\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\6\0\3\14\1\237"+
    "\23\14\16\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\6\0\5\14\1\240\7\14\1\241\11\14\16\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\6\0"+
    "\17\14\1\242\7\14\16\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\6\0\7\14\1\243\17\14\16\0"+
    "\1\14\1\65\1\244\2\0\3\14\1\0\1\14\6\0"+
    "\27\14\16\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\6\0\7\14\1\245\1\246\16\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\3\14"+
    "\1\247\23\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\13\14\1\250\13\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\1\14"+
    "\1\251\25\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\5\14\1\252\21\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\13\14"+
    "\1\253\13\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\1\254\26\14\16\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\6\0\6\14\1\255"+
    "\20\14\16\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\6\0\1\256\1\14\1\257\6\14\1\260\15\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\4\14\1\261\22\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\2\14\1\262\24\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\20\14\1\263\6\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\4\14\1\264\22\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\6\14\1\265\1\14\1\266\16\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\15\14"+
    "\1\267\11\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\21\14\1\270\5\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\4\14"+
    "\1\271\22\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\10\14\1\272\16\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\4\14"+
    "\1\273\6\14\1\274\13\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\4\14\1\275\22\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\3\14\1\276\23\14\16\0\1\14\1\65\1\277"+
    "\2\0\3\14\1\0\1\14\6\0\27\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\4\14"+
    "\1\300\22\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\12\14\1\301\14\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\4\14"+
    "\1\302\22\14\16\0\1\14\1\65\1\303\2\0\3\14"+
    "\1\0\1\14\6\0\11\14\1\304\15\14\16\0\1\176"+
    "\64\0\1\176\1\175\63\0\1\177\1\63\1\62\3\0"+
    "\1\62\56\0\1\200\1\64\1\200\1\0\1\305\3\200"+
    "\1\306\7\0\2\200\4\0\1\200\3\0\1\200\32\0"+
    "\1\14\1\65\1\307\2\0\3\14\1\0\1\14\6\0"+
    "\11\14\1\310\15\14\16\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\6\0\3\14\1\311\23\14\16\0"+
    "\1\14\1\65\1\312\2\0\3\14\1\0\1\14\6\0"+
    "\27\14\16\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\6\0\4\14\1\313\22\14\16\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\6\0\5\14\1\314"+
    "\21\14\16\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\6\0\1\315\26\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\6\14\1\316\20\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\3\14\1\317\23\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\4\14\1\320\22\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\1\321\26\14\16\0\1\14\1\65\1\322\2\0"+
    "\3\14\1\0\1\14\6\0\27\14\16\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\6\0\1\323\26\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\11\14\1\324\15\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\10\14\1\325\16\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\14\14\1\326\12\14\16\0\1\14\1\65\1\327"+
    "\2\0\3\14\1\0\1\14\6\0\27\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\3\14"+
    "\1\330\23\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\17\14\1\331\7\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\2\14"+
    "\1\332\24\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\1\333\26\14\16\0\1\14\1\65"+
    "\1\334\2\0\3\14\1\0\1\14\6\0\27\14\16\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\6\0"+
    "\17\14\1\335\7\14\16\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\6\0\5\14\1\336\21\14\16\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\6\0"+
    "\15\14\1\337\11\14\16\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\6\0\20\14\1\340\6\14\16\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\6\0"+
    "\24\14\1\341\2\14\16\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\6\0\15\14\1\342\11\14\16\0"+
    "\1\14\1\65\1\343\2\0\3\14\1\0\1\14\6\0"+
    "\27\14\16\0\1\14\1\65\1\344\2\0\3\14\1\0"+
    "\1\14\6\0\27\14\16\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\6\0\13\14\1\345\13\14\16\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\6\0"+
    "\1\346\26\14\16\0\1\14\1\65\1\347\2\0\3\14"+
    "\1\0\1\14\6\0\27\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\11\14\1\350\15\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\6\14\1\351\20\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\4\14\1\352\22\14"+
    "\16\0\1\14\1\65\1\353\2\0\3\14\1\0\1\14"+
    "\6\0\27\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\5\14\1\354\21\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\3\14"+
    "\1\355\23\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\24\14\1\356\2\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\15\14"+
    "\1\357\11\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\4\14\1\360\1\14\1\361\20\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\23\14\1\362\3\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\7\14\1\363\17\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\11\14\1\364\15\14\16\0\1\14\1\65\1\365"+
    "\2\0\3\14\1\0\1\14\6\0\27\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\10\14"+
    "\1\366\16\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\1\367\3\14\1\370\22\14\16\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\6\0"+
    "\11\14\1\371\15\14\16\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\6\0\10\14\1\372\16\14\16\0"+
    "\1\14\1\65\1\373\2\0\3\14\1\0\1\14\6\0"+
    "\27\14\16\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\6\0\2\14\1\374\24\14\16\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\6\0\11\14\1\375"+
    "\15\14\16\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\6\0\22\14\1\376\4\14\16\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\6\0\13\14\1\377"+
    "\13\14\16\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\6\0\10\14\1\u0100\16\14\16\0\1\u0101\1\0"+
    "\1\u0101\2\0\3\u0101\10\0\2\u0101\4\0\1\u0101\3\0"+
    "\1\u0101\34\0\1\u0102\3\0\1\u0102\56\0\1\14\1\65"+
    "\1\14\2\0\2\14\1\u0103\1\0\1\14\6\0\27\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\14\14\1\u0104\12\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\7\14\1\u0105\17\14"+
    "\16\0\1\14\1\65\1\u0106\2\0\3\14\1\0\1\14"+
    "\6\0\27\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\4\14\1\u0107\22\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\4\14"+
    "\1\u0108\22\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\4\14\1\u0109\22\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\3\14"+
    "\1\u010a\23\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\14\14\1\u010b\12\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\5\14"+
    "\1\u010c\1\14\1\u010d\17\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\5\14\1\u010e\21\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\13\14\1\u010f\13\14\16\0\1\14\1\65\1\u0110"+
    "\2\0\3\14\1\0\1\14\6\0\27\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\3\14"+
    "\1\u0111\23\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\3\14\1\u0112\23\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\3\14"+
    "\1\u0113\23\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\3\14\1\u0114\23\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\20\14"+
    "\1\u0115\6\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\3\14\1\u0116\23\14\16\0\1\14"+
    "\1\65\1\u0117\2\0\3\14\1\0\1\14\6\0\27\14"+
    "\16\0\1\14\1\65\1\u0118\2\0\3\14\1\0\1\14"+
    "\6\0\27\14\16\0\1\14\1\65\1\u0119\2\0\3\14"+
    "\1\0\1\14\6\0\27\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\11\14\1\u011a\15\14"+
    "\16\0\1\14\1\65\1\u011b\2\0\3\14\1\0\1\14"+
    "\6\0\27\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\3\14\1\u011c\23\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\6\14"+
    "\1\u011d\20\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\13\14\1\u011e\13\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\22\14"+
    "\1\u011f\4\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\14\14\1\u0120\12\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\4\14"+
    "\1\u0121\22\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\1\u0122\26\14\16\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\6\0\1\u0123\26\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\20\14\1\u0124\6\14\16\0\1\14\1\65\1\u0125"+
    "\2\0\3\14\1\0\1\14\6\0\27\14\16\0\1\14"+
    "\1\65\1\u0126\2\0\3\14\1\0\1\14\6\0\27\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\1\u0127\26\14\16\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\6\0\4\14\1\u0128\22\14\16\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\6\0"+
    "\3\14\1\u0129\11\14\1\u012a\11\14\16\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\6\0\1\u012b\26\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\14\14\1\u012c\12\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\1\u012d\26\14\16\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\6\0"+
    "\4\14\1\u012e\22\14\16\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\6\0\3\14\1\u012f\23\14\16\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\6\0"+
    "\10\14\1\u0130\16\14\16\0\1\14\1\65\1\u0131\2\0"+
    "\3\14\1\0\1\14\6\0\27\14\16\0\1\u0101\1\305"+
    "\1\u0101\2\0\3\u0101\1\306\7\0\2\u0101\4\0\1\u0101"+
    "\3\0\1\u0101\31\0\1\u0132\1\u0133\2\0\1\u0132\61\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\6\0"+
    "\4\14\1\u0134\22\14\16\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\6\0\11\14\1\u0135\15\14\16\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\6\0"+
    "\1\u0136\26\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\5\14\1\u0137\21\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\4\14"+
    "\1\u0138\22\14\16\0\1\14\1\65\1\u0139\2\0\3\14"+
    "\1\0\1\14\6\0\27\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\1\u013a\26\14\16\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\6\0"+
    "\5\14\1\u013b\21\14\16\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\6\0\11\14\1\u013c\15\14\16\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\6\0"+
    "\13\14\1\u013d\13\14\16\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\6\0\12\14\1\u013e\14\14\16\0"+
    "\1\14\1\65\1\u013f\2\0\3\14\1\0\1\14\6\0"+
    "\27\14\16\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\6\0\5\14\1\u0140\21\14\16\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\6\0\17\14\1\u0141"+
    "\7\14\16\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\6\0\13\14\1\u0142\13\14\16\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\6\0\12\14\1\u0143"+
    "\14\14\16\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\6\0\1\u0144\26\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\4\14\1\u0145\22\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\15\14\1\u0146\11\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\3\14\1\u0147\23\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\7\14\1\u0148\17\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\1\u0149\26\14\16\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\6\0"+
    "\6\14\1\u014a\20\14\16\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\6\0\15\14\1\u014b\11\14\16\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\6\0"+
    "\1\u014c\26\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\6\14\1\u014d\20\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\12\14"+
    "\1\u014e\14\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\4\14\1\u014f\22\14\16\0\1\14"+
    "\1\65\1\u0150\2\0\3\14\1\0\1\14\6\0\27\14"+
    "\16\0\1\14\1\65\1\14\2\0\2\14\1\u0151\1\0"+
    "\1\14\6\0\27\14\16\0\1\14\1\65\1\u0152\2\0"+
    "\3\14\1\0\1\14\6\0\27\14\16\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\6\0\3\14\1\u0153"+
    "\23\14\16\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\6\0\5\14\1\u0154\21\14\16\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\6\0\11\14\1\u0155"+
    "\15\14\16\0\1\u0133\64\0\1\u0133\1\u0132\63\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\11\14"+
    "\1\u0156\15\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\2\14\1\u0157\24\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\6\14"+
    "\1\u0158\20\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\12\14\1\u0159\14\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\13\14"+
    "\1\u015a\13\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\12\14\1\u015b\14\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\5\14"+
    "\1\u015c\21\14\16\0\1\14\1\65\1\u015d\2\0\3\14"+
    "\1\0\1\14\6\0\27\14\16\0\1\14\1\65\1\u015e"+
    "\2\0\3\14\1\0\1\14\6\0\27\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\1\u015f"+
    "\26\14\16\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\6\0\4\14\1\u0160\22\14\16\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\6\0\2\14\1\u0161"+
    "\24\14\16\0\1\14\1\65\1\u0162\2\0\3\14\1\0"+
    "\1\14\6\0\27\14\16\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\6\0\13\14\1\u0163\13\14\16\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\6\0"+
    "\4\14\1\u0164\22\14\16\0\1\14\1\65\1\u0165\2\0"+
    "\3\14\1\0\1\14\6\0\27\14\16\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\6\0\4\14\1\u0166"+
    "\22\14\16\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\6\0\17\14\1\u0167\7\14\16\0\1\14\1\65"+
    "\1\u0168\2\0\3\14\1\0\1\14\6\0\27\14\16\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\6\0"+
    "\12\14\1\u0169\14\14\16\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\6\0\1\u016a\26\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\3\14"+
    "\1\u016b\23\14\16\0\1\14\1\65\1\u016c\2\0\3\14"+
    "\1\0\1\14\6\0\27\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\6\14\1\u016d\20\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\2\14\1\u016e\24\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\13\14\1\u016f\13\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\4\14\1\u0170\22\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\11\14\1\u0171\15\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\4\14\1\u0172\22\14\16\0\1\14\1\65\1\u0173"+
    "\2\0\3\14\1\0\1\14\6\0\27\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\13\14"+
    "\1\u0174\13\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\4\14\1\u0175\22\14\16\0\1\14"+
    "\1\65\1\u0176\2\0\3\14\1\0\1\14\6\0\27\14"+
    "\16\0\1\14\1\65\1\u0177\2\0\3\14\1\0\1\14"+
    "\6\0\27\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\3\14\1\u0178\23\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\6\14"+
    "\1\u0179\20\14\16\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\6\0\13\14\1\u017a\13\14\16\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\6\0\13\14"+
    "\1\u017b\13\14\16\0\1\14\1\65\1\u017c\2\0\3\14"+
    "\1\0\1\14\6\0\27\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\11\14\1\u017d\15\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\3\14\1\u017e\23\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\12\14\1\u017f\14\14"+
    "\16\0\1\14\1\65\1\u0180\2\0\3\14\1\0\1\14"+
    "\6\0\27\14\16\0\1\14\1\65\1\u0181\2\0\3\14"+
    "\1\0\1\14\6\0\27\14\16\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\6\0\15\14\1\u0182\11\14"+
    "\16\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\6\0\26\14\1\u0183\16\0\1\14\1\65\1\u0184\2\0"+
    "\3\14\1\0\1\14\6\0\27\14\16\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\6\0\12\14\1\u0185"+
    "\14\14\11\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  9,  1,  9,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1, 
     1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  9,  9,  9,  9,  9,  9,  9,  1,  1,  9,  1, 
     0,  0,  0,  0,  0,  1,  1,  1,  9,  1,  1,  1,  1,  9,  9,  9, 
     9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  0,  1,  1,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */

	StringBuilder string_content = new StringBuilder();

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[15052];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 7: 
        case 125: 
        case 126: 
          { return symbolFactory.newSymbol("DECIMAL_LITERAL", DECIMAL_LITERAL, yytext()); }
        case 390: break;
        case 8: 
        case 11: 
        case 12: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 53: 
        case 54: 
        case 55: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 65: 
        case 66: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 100: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 128: 
        case 129: 
        case 131: 
        case 132: 
        case 133: 
        case 135: 
        case 136: 
        case 137: 
        case 139: 
        case 140: 
        case 142: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 185: 
        case 187: 
        case 188: 
        case 191: 
        case 193: 
        case 194: 
        case 195: 
        case 199: 
        case 200: 
        case 201: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 225: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 250: 
        case 252: 
        case 255: 
        case 260: 
        case 263: 
        case 265: 
        case 267: 
        case 268: 
        case 269: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 301: 
        case 302: 
        case 307: 
        case 308: 
        case 309: 
        case 312: 
        case 313: 
        case 315: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 323: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 346: 
        case 350: 
        case 351: 
        case 352: 
        case 354: 
        case 355: 
        case 357: 
        case 358: 
        case 361: 
        case 365: 
        case 368: 
        case 369: 
        case 371: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 378: 
        case 380: 
        case 386: 
        case 387: 
          { return symbolFactory.newSymbol("IDENTIFIER", IDENTIFIER, yytext()); }
        case 391: break;
        case 197: 
        case 306: 
          { return symbolFactory.newSymbol("BASED_LITERAL", BASED_LITERAL, yytext()); }
        case 392: break;
        case 117: 
          { string_content.append('\f');  }
        case 393: break;
        case 118: 
          { string_content.append('\\');  }
        case 394: break;
        case 119: 
          { string_content.append('\"');  }
        case 395: break;
        case 120: 
          { string_content.append('\b');  }
        case 396: break;
        case 121: 
          { string_content.append('\r');  }
        case 397: break;
        case 122: 
          { string_content.append('\t');  }
        case 398: break;
        case 123: 
          { string_content.append('\n');  }
        case 399: break;
        case 101: 
          { return symbolFactory.newSymbol("DO", DO); }
        case 400: break;
        case 99: 
          { return symbolFactory.newSymbol("IN", IN); }
        case 401: break;
        case 97: 
          { return symbolFactory.newSymbol("IF", IF); }
        case 402: break;
        case 74: 
          { return symbolFactory.newSymbol("OR", OR); }
        case 403: break;
        case 73: 
          { return symbolFactory.newSymbol("OF", OF); }
        case 404: break;
        case 67: 
          { return symbolFactory.newSymbol("AT", AT); }
        case 405: break;
        case 388: 
          { return symbolFactory.newSymbol("SYNCHRONIZED", SYNCHRONIZED); }
        case 406: break;
        case 39: 
          { return symbolFactory.newSymbol("OPARENTHESIS", OPARENTHESIS); }
        case 407: break;
        case 40: 
          { return symbolFactory.newSymbol("CPARENTHESIS", CPARENTHESIS); }
        case 408: break;
        case 3: 
        case 45: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 409: break;
        case 47: 
          {  /* NOTHING */  }
        case 410: break;
        case 4: 
        case 5: 
          {  /* NOTHING */  }
        case 411: break;
        case 364: 
          { return symbolFactory.newSymbol("GENERIC", GENERIC); }
        case 412: break;
        case 363: 
          { return symbolFactory.newSymbol("DECLARE", DECLARE); }
        case 413: break;
        case 360: 
          { return symbolFactory.newSymbol("LIMITED", LIMITED); }
        case 414: break;
        case 359: 
          { return symbolFactory.newSymbol("PRIVATE", PRIVATE); }
        case 415: break;
        case 356: 
          { return symbolFactory.newSymbol("PACKAGE", PACKAGE); }
        case 416: break;
        case 353: 
          { return symbolFactory.newSymbol("SUBTYPE", SUBTYPE); }
        case 417: break;
        case 349: 
          { return symbolFactory.newSymbol("REQUEUE", REQUEUE); }
        case 418: break;
        case 348: 
          { return symbolFactory.newSymbol("REVERSE", REVERSE); }
        case 419: break;
        case 347: 
          { return symbolFactory.newSymbol("RENAMES", RENAMES); }
        case 420: break;
        case 345: 
          { return symbolFactory.newSymbol("BOOLEAN", BOOLEAN); }
        case 421: break;
        case 344: 
          { return symbolFactory.newSymbol("ALIASED", ALIASED); }
        case 422: break;
        case 325: 
          { return symbolFactory.newSymbol("STR_TYP", STR_TYP); }
        case 423: break;
        case 13: 
        case 15: 
        case 16: 
        case 62: 
          { return symbolFactory.newSymbol("COMPARE", COMPARE); }
        case 424: break;
        case 304: 
          { return symbolFactory.newSymbol("WHILE", WHILE); }
        case 425: break;
        case 303: 
          { return symbolFactory.newSymbol("UNTIL", UNTIL); }
        case 426: break;
        case 300: 
          { return symbolFactory.newSymbol("DELTA", DELTA); }
        case 427: break;
        case 299: 
          { return symbolFactory.newSymbol("DELAY", DELAY); }
        case 428: break;
        case 280: 
          { return symbolFactory.newSymbol("RANGE", RANGE); }
        case 429: break;
        case 279: 
          { return symbolFactory.newSymbol("RAISE", RAISE); }
        case 430: break;
        case 270: 
          { return symbolFactory.newSymbol("BEGIN", BEGIN); }
        case 431: break;
        case 266: 
          { return symbolFactory.newSymbol("ARRAY", ARRAY); }
        case 432: break;
        case 264: 
          { return symbolFactory.newSymbol("ABORT", ABORT); }
        case 433: break;
        case 262: 
          { return symbolFactory.newSymbol("FLOAT", FLOAT); }
        case 434: break;
        case 261: 
          { return symbolFactory.newSymbol("FALSE", FALSE); }
        case 435: break;
        case 259: 
          { return symbolFactory.newSymbol("ENTRY", ENTRY); }
        case 436: break;
        case 258: 
          { return symbolFactory.newSymbol("ELSIF", ELSIF); }
        case 437: break;
        case 61: 
          { return symbolFactory.newSymbol("ARROW", ARROW); }
        case 438: break;
        case 6: 
          { return symbolFactory.newSymbol("MINUS", MINUS); }
        case 439: break;
        case 14: 
          { return symbolFactory.newSymbol("SLASH", SLASH); }
        case 440: break;
        case 35: 
          { return symbolFactory.newSymbol("TIMES", TIMES); }
        case 441: break;
        case 36: 
          { return symbolFactory.newSymbol("COLON", COLON); }
        case 442: break;
        case 41: 
          { return symbolFactory.newSymbol("COMMA", COMMA); }
        case 443: break;
        case 46: 
          { yybegin(YYINITIAL);
  						return symbolFactory.newSymbol("STR", STR, string_content.toString());
  						// symbol(sym.STR, string_content.toString())
  						 }
        case 444: break;
        case 44: 
          { string_content.append(yytext());  }
        case 445: break;
        case 17: 
          { yybegin(STRING);
					string_content.setLength(0);  }
        case 446: break;
        case 385: 
          { return symbolFactory.newSymbol("OVERRIDING", OVERRIDING); }
        case 447: break;
        case 115: 
          { return symbolFactory.newSymbol("ASSIGNMENT", ASSIGNMENT); }
        case 448: break;
        case 56: 
          { return symbolFactory.newSymbol("DOUBLE_DOT", DOUBLE_DOT); }
        case 449: break;
        case 43: 
          { return symbolFactory.newSymbol("LOGICAL_OR", LOGICAL_OR); }
        case 450: break;
        case 38: 
          { return symbolFactory.newSymbol("APOSTROPHE", APOSTROPHE); }
        case 451: break;
        case 362: 
          { return symbolFactory.newSymbol("INT", INT); }
        case 452: break;
        case 10: 
          { return symbolFactory.newSymbol("DOT", DOT); }
        case 453: break;
        case 130: 
          { return symbolFactory.newSymbol("END", END); }
        case 454: break;
        case 134: 
          { return symbolFactory.newSymbol("FOR", FOR); }
        case 455: break;
        case 138: 
          { return symbolFactory.newSymbol("ABS", ABS); }
        case 456: break;
        case 141: 
          { return symbolFactory.newSymbol("ALL", ALL); }
        case 457: break;
        case 143: 
          { return symbolFactory.newSymbol("AND", AND); }
        case 458: break;
        case 148: 
          { return symbolFactory.newSymbol("OUT", OUT); }
        case 459: break;
        case 153: 
          { return symbolFactory.newSymbol("REM", REM); }
        case 460: break;
        case 176: 
          { return symbolFactory.newSymbol("PUT", PUT); }
        case 461: break;
        case 183: 
          { return symbolFactory.newSymbol("NEW", NEW); }
        case 462: break;
        case 184: 
          { return symbolFactory.newSymbol("NOT", NOT); }
        case 463: break;
        case 186: 
          { return symbolFactory.newSymbol("GET", GET); }
        case 464: break;
        case 189: 
          { return symbolFactory.newSymbol("XOR", XOR); }
        case 465: break;
        case 190: 
          { return symbolFactory.newSymbol("USE", USE); }
        case 466: break;
        case 192: 
          { return symbolFactory.newSymbol("MOD", MOD); }
        case 467: break;
        case 372: 
          { return symbolFactory.newSymbol("CONSTANT", CONSTANT); }
        case 468: break;
        case 370: 
          { return symbolFactory.newSymbol("SEPARATE", SEPARATE); }
        case 469: break;
        case 367: 
          { return symbolFactory.newSymbol("ABSTRACT", ABSTRACT); }
        case 470: break;
        case 366: 
          { return symbolFactory.newSymbol("FUNCTION", FUNCTION); }
        case 471: break;
        case 42: 
          { return symbolFactory.newSymbol("SEMI", SEMI, yyline); }
        case 472: break;
        case 114: 
          { return symbolFactory.newSymbol("DOUBLE_STAR", DOUBLE_STAR); }
        case 473: break;
        case 37: 
          { return symbolFactory.newSymbol("LOGICAL_AND", LOGICAL_AND); }
        case 474: break;
        case 381: 
          { return symbolFactory.newSymbol("CHAR", CHAR); }
        case 475: break;
        case 9: 
          { return symbolFactory.newSymbol("PLUS", PLUS); }
        case 476: break;
        case 116: 
          { throw new RuntimeException("Illegal escape sequence \"" + yytext() + "\"");  }
        case 477: break;
        case 198: 
          { return symbolFactory.newSymbol("ELSE", ELSE); }
        case 478: break;
        case 202: 
          { return symbolFactory.newSymbol("EXIT", EXIT); }
        case 479: break;
        case 213: 
          { return symbolFactory.newSymbol("BODY", BODY); }
        case 480: break;
        case 224: 
          { return symbolFactory.newSymbol("TASK", TASK); }
        case 481: break;
        case 226: 
          { return symbolFactory.newSymbol("TRUE", TRUE); }
        case 482: break;
        case 227: 
          { return symbolFactory.newSymbol("TYPE", TYPE); }
        case 483: break;
        case 228: 
          { return symbolFactory.newSymbol("THEN", THEN); }
        case 484: break;
        case 234: 
          { return symbolFactory.newSymbol("CASE", CASE); }
        case 485: break;
        case 242: 
          { return symbolFactory.newSymbol("LOOP", LOOP); }
        case 486: break;
        case 249: 
          { return symbolFactory.newSymbol("NULL", NULL); }
        case 487: break;
        case 251: 
          { return symbolFactory.newSymbol("GOTO", GOTO); }
        case 488: break;
        case 253: 
          { return symbolFactory.newSymbol("WITH", WITH); }
        case 489: break;
        case 254: 
          { return symbolFactory.newSymbol("WHEN", WHEN); }
        case 490: break;
        case 384: 
          { return symbolFactory.newSymbol("INTERFACE", INTERFACE); }
        case 491: break;
        case 383: 
          { return symbolFactory.newSymbol("PROCEDURE", PROCEDURE); }
        case 492: break;
        case 382: 
          { return symbolFactory.newSymbol("PROTECTED", PROTECTED); }
        case 493: break;
        case 379: 
          { return symbolFactory.newSymbol("TERMINATE", TERMINATE); }
        case 494: break;
        case 377: 
          { return symbolFactory.newSymbol("EXCEPTION", EXCEPTION); }
        case 495: break;
        case 339: 
          { return symbolFactory.newSymbol("DIGITS", DIGITS); }
        case 496: break;
        case 331: 
          { return symbolFactory.newSymbol("PRAGMA", PRAGMA); }
        case 497: break;
        case 324: 
          { return symbolFactory.newSymbol("SELECT", SELECT); }
        case 498: break;
        case 322: 
          { return symbolFactory.newSymbol("TAGGED", TAGGED); }
        case 499: break;
        case 317: 
          { return symbolFactory.newSymbol("RECORD", RECORD); }
        case 500: break;
        case 316: 
          { return symbolFactory.newSymbol("RETURN", RETURN); }
        case 501: break;
        case 314: 
          { return symbolFactory.newSymbol("OTHERS", OTHERS); }
        case 502: break;
        case 311: 
          { return symbolFactory.newSymbol("ACCEPT", ACCEPT); }
        case 503: break;
        case 310: 
          { return symbolFactory.newSymbol("ACCESS", ACCESS); }
        case 504: break;
        case 98: 
          { return symbolFactory.newSymbol("IS", IS, yyline); }
        case 505: break;
        case 64: 
          { return symbolFactory.newSymbol("RLABEL", RLABEL); }
        case 506: break;
        case 63: 
          { return symbolFactory.newSymbol("LLABEL", LLABEL); }
        case 507: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
