/* The following code was generated by JFlex 1.3.5 on 5/2/19 1:49 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 5/2/19 1:49 PM from the specification file
 * <tt>file:/E:/JavaWorkspace/adaCompiler/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int STRING = 2;
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\20"+
    "\1\15\2\0\1\56\1\57\1\60\1\61\1\52\1\10\1\62\1\4"+
    "\1\11\1\54\12\5\1\53\1\63\1\55\1\50\1\51\2\0\4\12"+
    "\1\13\1\12\24\16\1\0\1\17\2\0\1\6\1\0\1\21\1\22"+
    "\1\27\1\33\1\7\1\14\1\36\1\43\1\32\1\16\1\45\1\31"+
    "\1\41\1\34\1\23\1\30\1\46\1\24\1\26\1\25\1\40\1\44"+
    "\1\42\1\37\1\35\1\47\1\0\1\64\uff83\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    53,   106,   159,   212,   159,   265,   318,   371,   159, 
      424,   477,   530,   159,   583,   636,   689,   742,   795,   848, 
      901,   954,  1007,  1060,  1113,  1166,  1219,  1272,  1325,  1378, 
     1431,  1484,  1537,  1590,  1643,  1696,  1749,   159,   159,   159, 
      159,   159,   159,   159,  1802,  1855,   159,  1908,  1961,  2014, 
     2067,  2120,  2173,  2226,  2279,  2332,   159,  2385,  2438,  2491, 
     2544,   477,  2597,  2650,  2703,  2756,  2809,  2862,  2915,  2968, 
     3021,  3074,  3127,  3180,  3233,  3286,  3339,  3392,  3445,  3498, 
     3551,  3604,  3657,  3710,  3763,  3816,  3869,  3922,  3975,  4028, 
     4081,  4134,  4187,  4240,  4293,  4346,   159,   159,   159,   159, 
      159,   159,   159,   159,   159,   159,   159,   159,   159,   159, 
      159,   159,  4399,  4452,  4505,  4558,  4611,  4664,  4717,  4770, 
     4823,  4876,  4929,  4982,  5035,  5088,  5141,  5194,  5247,  5300, 
     5353,  5406,  5459,  5512,  5565,  5618,  5671,  5724,  5777,  5830, 
     5883,  5936,  5989,  6042,  6095,  6148,  6201,  6254,  6307,  6360, 
     6413,  6466,  6519,  6572,  6625,  6678,  6731,  6784,  6837,  6890, 
     6943,  6996,  7049,  7102,  7155,  7208,  7261,  7314,  7367,  7420, 
     7473,  7526,  7579,  7632,  7685,  7738,  7791,  7844,  7897,  7950, 
     8003,  8056,  8109,  8162,  8215,  8268,  8321,  8374,  8427,  8480, 
     8533,  8586,  8639,  8692,  8745,  8798,  8851,  8904,  8957,  9010, 
     9063,  9116,  9169,  9222,  9275,  9328,  9381,  9434,  9487,  9540, 
     9593,  9646,  9699,  9752,  9805,  9858,  9911,  9964, 10017, 10070, 
    10123, 10176, 10229, 10282, 10335, 10388
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\4\1\5\2\6\1\7\1\10\1\4\1\11\1\12"+
    "\1\13\2\14\1\15\1\4\1\14\1\4\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\14\1\33\1\34\1\35\1\36"+
    "\1\37\5\14\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\65\4"+
    "\1\55\2\4\14\55\1\56\1\57\44\55\67\0\1\6"+
    "\66\0\1\60\65\0\1\10\1\61\1\62\1\0\1\63"+
    "\1\0\1\62\1\0\1\64\54\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\2\0\10\14\1\66\2\14"+
    "\1\67\2\14\1\70\10\14\26\0\1\71\60\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\2\0\27\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\2\14\1\72\14\14\1\73\7\14\22\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\2\0\1\14"+
    "\1\74\1\14\1\75\1\76\1\14\1\77\1\14\1\100"+
    "\2\14\1\101\13\14\22\0\1\14\1\65\1\102\2\0"+
    "\3\14\1\0\1\14\2\0\2\14\1\103\24\14\22\0"+
    "\1\14\1\65\1\14\2\0\2\14\1\76\1\0\1\14"+
    "\2\0\3\14\1\76\1\104\12\14\1\105\3\14\1\106"+
    "\3\14\22\0\1\14\1\65\1\107\2\0\3\14\1\0"+
    "\1\14\2\0\1\110\26\14\22\0\1\14\1\65\1\111"+
    "\2\0\3\14\1\0\1\14\2\0\1\112\13\14\1\113"+
    "\5\14\1\114\4\14\22\0\1\14\1\65\1\115\2\0"+
    "\3\14\1\0\1\14\2\0\14\14\1\116\2\14\1\117"+
    "\7\14\22\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\2\0\1\120\1\14\1\121\24\14\22\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\2\0\1\122"+
    "\2\14\1\123\23\14\22\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\2\0\2\14\1\124\6\14\1\125"+
    "\15\14\22\0\1\14\1\65\1\14\2\0\2\14\1\76"+
    "\1\0\1\14\2\0\5\14\1\76\5\14\1\126\13\14"+
    "\22\0\1\14\1\65\1\127\2\0\3\14\1\0\1\14"+
    "\2\0\2\14\1\76\6\14\1\130\15\14\22\0\1\14"+
    "\1\65\1\131\2\0\3\14\1\0\1\14\2\0\2\14"+
    "\1\105\14\14\1\132\7\14\22\0\1\14\1\65\1\133"+
    "\2\0\3\14\1\0\1\14\2\0\2\14\1\134\24\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\2\14\1\72\24\14\22\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\2\0\5\14\1\135\5\14"+
    "\1\136\13\14\22\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\2\0\2\14\1\101\24\14\22\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\2\0\11\14"+
    "\1\137\10\14\1\140\4\14\66\0\1\141\63\0\1\142"+
    "\1\143\65\0\1\144\62\0\1\145\64\0\1\146\64\0"+
    "\1\147\4\0\1\150\7\0\1\55\2\0\14\55\2\0"+
    "\44\55\2\151\1\0\11\151\1\152\2\151\1\153\1\154"+
    "\1\151\1\155\1\151\1\156\1\157\6\151\1\160\30\151"+
    "\1\60\2\0\62\60\5\0\1\10\63\0\1\161\1\162"+
    "\2\0\1\161\61\0\1\163\64\0\1\164\1\0\1\164"+
    "\2\0\3\164\4\0\2\164\4\0\1\164\3\0\1\164"+
    "\36\0\1\14\1\0\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\27\14\22\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\2\0\5\14\1\165\21\14\22\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\2\0\4\14"+
    "\1\166\5\14\1\76\14\14\22\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\2\0\6\14\1\167\2\14"+
    "\1\105\15\14\22\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\2\0\3\14\1\76\23\14\22\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\2\0\13\14"+
    "\1\170\13\14\22\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\2\0\2\14\1\171\2\14\1\172\21\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\3\14\1\173\23\14\22\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\2\0\6\14\1\174\20\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\10\14\1\76\1\175\15\14\22\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\2\0\12\14\1\76"+
    "\14\14\22\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\2\0\15\14\1\176\11\14\22\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\2\0\12\14\1\177"+
    "\14\14\22\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\2\0\22\14\1\200\4\14\22\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\2\0\4\14\1\76"+
    "\22\14\22\0\1\14\1\65\1\201\2\0\3\14\1\0"+
    "\1\14\2\0\27\14\22\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\2\0\4\14\1\202\1\14\1\203"+
    "\4\14\1\204\4\14\1\76\2\14\1\205\1\14\1\206"+
    "\1\14\22\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\2\0\11\14\1\120\1\14\1\207\13\14\22\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\2\0"+
    "\3\14\1\210\23\14\22\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\2\0\5\14\1\211\7\14\1\212"+
    "\11\14\22\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\2\0\7\14\1\135\17\14\22\0\1\14\1\65"+
    "\1\213\2\0\3\14\1\0\1\14\2\0\27\14\22\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\2\0"+
    "\7\14\1\214\1\215\16\14\22\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\2\0\13\14\1\216\13\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\1\14\1\217\25\14\22\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\2\0\5\14\1\135\21\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\13\14\1\220\13\14\22\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\2\0\6\14\1\221\20\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\1\222\1\14\1\223\6\14\1\224\15\14\22\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\2\0"+
    "\2\14\1\225\24\14\22\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\2\0\20\14\1\226\6\14\22\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\2\0"+
    "\4\14\1\227\22\14\22\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\2\0\6\14\1\230\1\14\1\231"+
    "\16\14\22\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\2\0\15\14\1\232\11\14\22\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\2\0\21\14\1\76"+
    "\5\14\22\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\2\0\10\14\1\233\16\14\22\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\2\0\13\14\1\234"+
    "\13\14\22\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\2\0\4\14\1\235\22\14\22\0\1\14\1\65"+
    "\1\76\2\0\3\14\1\0\1\14\2\0\27\14\22\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\2\0"+
    "\4\14\1\236\22\14\22\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\2\0\4\14\1\237\22\14\22\0"+
    "\1\14\1\65\1\213\2\0\3\14\1\0\1\14\2\0"+
    "\11\14\1\240\15\14\22\0\1\162\64\0\1\162\1\161"+
    "\63\0\1\163\1\63\1\62\3\0\1\62\56\0\1\164"+
    "\1\64\1\164\1\0\1\241\3\164\1\242\3\0\2\164"+
    "\4\0\1\164\3\0\1\164\36\0\1\14\1\65\1\76"+
    "\2\0\3\14\1\0\1\14\2\0\11\14\1\243\15\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\3\14\1\177\23\14\22\0\1\14\1\65\1\244"+
    "\2\0\3\14\1\0\1\14\2\0\27\14\22\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\2\0\6\14"+
    "\1\245\20\14\22\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\2\0\3\14\1\105\23\14\22\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\2\0\4\14"+
    "\1\246\22\14\22\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\2\0\1\177\26\14\22\0\1\14\1\65"+
    "\1\247\2\0\3\14\1\0\1\14\2\0\27\14\22\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\2\0"+
    "\1\250\26\14\22\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\2\0\11\14\1\213\15\14\22\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\2\0\14\14"+
    "\1\76\12\14\22\0\1\14\1\65\1\251\2\0\3\14"+
    "\1\0\1\14\2\0\27\14\22\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\2\0\3\14\1\252\23\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\17\14\1\253\7\14\22\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\2\0\2\14\1\254\24\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\1\255\26\14\22\0\1\14\1\65\1\256\2\0"+
    "\3\14\1\0\1\14\2\0\27\14\22\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\2\0\17\14\1\257"+
    "\7\14\22\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\2\0\15\14\1\135\11\14\22\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\2\0\20\14\1\260"+
    "\6\14\22\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\2\0\24\14\1\76\2\14\22\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\2\0\15\14\1\261"+
    "\11\14\22\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\2\0\13\14\1\76\13\14\22\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\2\0\1\262\26\14"+
    "\22\0\1\14\1\65\1\263\2\0\3\14\1\0\1\14"+
    "\2\0\27\14\22\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\2\0\6\14\1\264\20\14\22\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\2\0\4\14"+
    "\1\265\22\14\22\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\2\0\5\14\1\266\21\14\22\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\2\0\24\14"+
    "\1\267\2\14\22\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\2\0\15\14\1\270\11\14\22\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\2\0\4\14"+
    "\1\271\1\14\1\272\20\14\22\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\2\0\23\14\1\273\3\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\7\14\1\76\17\14\22\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\2\0\11\14\1\274\15\14"+
    "\22\0\1\14\1\65\1\275\2\0\3\14\1\0\1\14"+
    "\2\0\27\14\22\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\2\0\10\14\1\276\16\14\22\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\2\0\1\177"+
    "\3\14\1\277\22\14\22\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\2\0\11\14\1\300\15\14\22\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\2\0"+
    "\10\14\1\76\16\14\22\0\1\14\1\65\1\301\2\0"+
    "\3\14\1\0\1\14\2\0\27\14\22\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\2\0\2\14\1\76"+
    "\24\14\22\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\2\0\11\14\1\233\15\14\22\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\2\0\22\14\1\76"+
    "\4\14\22\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\2\0\10\14\1\135\16\14\22\0\1\302\1\0"+
    "\1\302\2\0\3\302\4\0\2\302\4\0\1\302\3\0"+
    "\1\302\40\0\1\303\3\0\1\303\56\0\1\14\1\65"+
    "\1\14\2\0\2\14\1\76\1\0\1\14\2\0\27\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\7\14\1\245\17\14\22\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\2\0\4\14\1\304\22\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\3\14\1\305\23\14\22\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\2\0\5\14\1\306\1\14"+
    "\1\105\17\14\22\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\2\0\5\14\1\261\21\14\22\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\2\0\3\14"+
    "\1\306\23\14\22\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\2\0\3\14\1\307\23\14\22\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\2\0\3\14"+
    "\1\213\23\14\22\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\2\0\3\14\1\101\23\14\22\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\2\0\20\14"+
    "\1\310\6\14\22\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\2\0\3\14\1\120\23\14\22\0\1\14"+
    "\1\65\1\311\2\0\3\14\1\0\1\14\2\0\27\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\11\14\1\312\15\14\22\0\1\14\1\65\1\101"+
    "\2\0\3\14\1\0\1\14\2\0\27\14\22\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\2\0\3\14"+
    "\1\273\23\14\22\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\2\0\6\14\1\105\20\14\22\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\2\0\22\14"+
    "\1\313\4\14\22\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\2\0\14\14\1\113\12\14\22\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\2\0\4\14"+
    "\1\314\22\14\22\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\2\0\1\207\26\14\22\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\2\0\20\14\1\277"+
    "\6\14\22\0\1\14\1\65\1\315\2\0\3\14\1\0"+
    "\1\14\2\0\27\14\22\0\1\14\1\65\1\316\2\0"+
    "\3\14\1\0\1\14\2\0\27\14\22\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\2\0\1\317\26\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\4\14\1\261\22\14\22\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\2\0\3\14\1\320\23\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\1\321\26\14\22\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\2\0\1\76\26\14\22\0\1\14"+
    "\1\65\1\14\2\0\3\14\1\0\1\14\2\0\4\14"+
    "\1\306\22\14\22\0\1\14\1\65\1\14\2\0\3\14"+
    "\1\0\1\14\2\0\3\14\1\322\23\14\22\0\1\302"+
    "\1\241\1\302\2\0\3\302\1\242\3\0\2\302\4\0"+
    "\1\302\3\0\1\302\35\0\1\323\1\324\2\0\1\323"+
    "\61\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\11\14\1\325\15\14\22\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\2\0\1\263\26\14\22\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\2\0"+
    "\5\14\1\76\21\14\22\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\2\0\11\14\1\326\15\14\22\0"+
    "\1\14\1\65\1\306\2\0\3\14\1\0\1\14\2\0"+
    "\27\14\22\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\2\0\17\14\1\135\7\14\22\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\2\0\13\14\1\273"+
    "\13\14\22\0\1\14\1\65\1\14\2\0\3\14\1\0"+
    "\1\14\2\0\3\14\1\327\23\14\22\0\1\14\1\65"+
    "\1\14\2\0\3\14\1\0\1\14\2\0\1\330\26\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\6\14\1\274\20\14\22\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\2\0\12\14\1\331\14\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\4\14\1\135\22\14\22\0\1\14\1\65\1\14"+
    "\2\0\2\14\1\332\1\0\1\14\2\0\27\14\22\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\2\0"+
    "\3\14\1\135\23\14\22\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\2\0\11\14\1\333\15\14\22\0"+
    "\1\324\64\0\1\324\1\323\63\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\2\0\2\14\1\213\24\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\12\14\1\334\14\14\22\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\2\0\2\14\1\335\24\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\13\14\1\105\13\14\22\0\1\14\1\65\1\14"+
    "\2\0\3\14\1\0\1\14\2\0\17\14\1\321\7\14"+
    "\22\0\1\14\1\65\1\14\2\0\3\14\1\0\1\14"+
    "\2\0\1\336\26\14\22\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\2\0\6\14\1\76\20\14\22\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\2\0"+
    "\11\14\1\337\15\14\22\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\2\0\13\14\1\340\13\14\22\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\2\0"+
    "\6\14\1\135\20\14\22\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\2\0\13\14\1\341\13\14\22\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\2\0"+
    "\11\14\1\342\15\14\22\0\1\14\1\65\1\14\2\0"+
    "\3\14\1\0\1\14\2\0\15\14\1\76\11\14\22\0"+
    "\1\14\1\65\1\14\2\0\3\14\1\0\1\14\2\0"+
    "\26\14\1\261\15\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  9,  1,  9,  1,  1,  1,  9,  1,  1,  1,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  9,  9,  9,  9,  9,  9,  9,  1,  1,  9,  1, 
     0,  0,  0,  0,  0,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 
     0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	StringBuilder string_content = new StringBuilder();

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[10441];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 47: 
          { System.out.println("-FOUND- comment: " + yytext());
   					System.out.println("\t~~ line: " + yyline);
   					System.out.println("\t~~ column: " + yycolumn);  }
        case 227: break;
        case 32: 
          { System.out.println("-FOUND- greater than");  }
        case 228: break;
        case 111: 
          { string_content.append('\n');  }
        case 229: break;
        case 110: 
          { string_content.append('\t');  }
        case 230: break;
        case 109: 
          { string_content.append('\r');  }
        case 231: break;
        case 108: 
          { string_content.append('\b');  }
        case 232: break;
        case 107: 
          { string_content.append('\"');  }
        case 233: break;
        case 106: 
          { string_content.append('\\');  }
        case 234: break;
        case 105: 
          { string_content.append('\f');  }
        case 235: break;
        case 39: 
          { System.out.println("-FOUND- open parenthesis");  }
        case 236: break;
        case 40: 
          { System.out.println("-FOUND- close parenthesis");  }
        case 237: break;
        case 4: 
        case 5: 
          {                                }
        case 238: break;
        case 38: 
          { System.out.println("-FOUND- apostrophe");  }
        case 239: break;
        case 56: 
          { System.out.println("-FOUND- double dot");  }
        case 240: break;
        case 99: 
          { System.out.println("-FOUND- double star");  }
        case 241: break;
        case 100: 
          { System.out.println("-FOUND- assignment");  }
        case 242: break;
        case 101: 
          { System.out.println("-FOUND- inequality");  }
        case 243: break;
        case 98: 
          { System.out.println("-FOUND- right label bracket");  }
        case 244: break;
        case 102: 
          { System.out.println("-FOUND- less than or equal");  }
        case 245: break;
        case 103: 
          { System.out.println("-FOUND- left label bracket");  }
        case 246: break;
        case 3: 
        case 45: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 247: break;
        case 46: 
          { yybegin(YYINITIAL);
  						System.out.println("matched String [" + string_content.toString() + "] at line [" + yyline + "], column [" + yycolumn + "]\n");  }
        case 248: break;
        case 44: 
          { string_content.append(yytext());  }
        case 249: break;
        case 13: 
          { yybegin(STRING);
					string_content.setLength(0);  }
        case 250: break;
        case 36: 
          { System.out.println("-FOUND- less than");  }
        case 251: break;
        case 31: 
          { System.out.println("-FOUND- equality");  }
        case 252: break;
        case 42: 
          { System.out.println("-FOUND- semicolon");  }
        case 253: break;
        case 97: 
          { System.out.println("-FOUND- greater than or equal");  }
        case 254: break;
        case 35: 
          { System.out.println("-FOUND- slash");  }
        case 255: break;
        case 34: 
          { System.out.println("-FOUND- colon");  }
        case 256: break;
        case 33: 
          { System.out.println("-FOUND- star");  }
        case 257: break;
        case 6: 
          { System.out.println("-FOUND- dash");  }
        case 258: break;
        case 9: 
          { System.out.println("-FOUND- plus");  }
        case 259: break;
        case 41: 
          { System.out.println("-FOUND- comma");  }
        case 260: break;
        case 96: 
          { System.out.println("-FOUND- arrow");  }
        case 261: break;
        case 104: 
          { throw new RuntimeException("Illegal escape sequence \"" + yytext() + "\"");  }
        case 262: break;
        case 8: 
        case 11: 
        case 12: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 53: 
        case 54: 
        case 55: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
          { System.out.println("-FOUND- identifier " + yytext());
   					System.out.println("\t~~ line: " + yyline);
   					System.out.println("\t~~ column: " + yycolumn);  }
        case 263: break;
        case 121: 
          { System.out.print("matched Keyword [" + yytext() + "] at line [" + yyline + "], column [" + yycolumn + "]\n");  }
        case 264: break;
        case 61: 
          { System.out.print("matched Keyword [" + yytext() + "] at line [" + yyline + "], column [" + yycolumn + "]\n");  }
        case 265: break;
        case 85: 
          { System.out.print("matched Keyword [" + yytext() + "] at line [" + yyline + "], column [" + yycolumn + "]\n");  }
        case 266: break;
        case 161: 
        case 211: 
          { System.out.println("-FOUND- based literal " + yytext());
   					System.out.println("\t~~ line: " + yyline);
   					System.out.println("\t~~ column: " + yycolumn);  }
        case 267: break;
        case 37: 
          { System.out.println("-FOUND- and");  }
        case 268: break;
        case 10: 
          { System.out.println("-FOUND- dot");  }
        case 269: break;
        case 43: 
          { System.out.println("-FOUND- or");  }
        case 270: break;
        case 7: 
        case 113: 
        case 114: 
          { System.out.println("-FOUND- decimal literal " + yytext());
   					System.out.println("\t~~ line: " + yyline);
   					System.out.println("\t~~ column: " + yycolumn);  }
        case 271: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
