
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\006\000\002\002\004\000\002\005" +
    "\010\000\002\005\007\000\002\032\006\000\002\033\003" +
    "\000\002\033\003\000\002\046\002\000\002\047\002\000" +
    "\002\050\002\000\002\004\020\000\002\006\005\000\002" +
    "\051\002\000\002\012\010\000\002\012\005\000\002\013" +
    "\005\000\002\013\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\010\004\000\002\010\003\000\002\010\004\000\002" +
    "\010\003\000\002\010\004\000\002\010\003\000\002\014" +
    "\005\000\002\014\006\000\002\015\013\000\002\016\003" +
    "\000\002\016\005\000\002\017\003\000\002\017\003\000" +
    "\002\011\004\000\002\011\003\000\002\011\005\000\002" +
    "\011\004\000\002\011\005\000\002\011\004\000\002\011" +
    "\004\000\002\011\003\000\002\011\004\000\002\011\003" +
    "\000\002\011\004\000\002\011\003\000\002\011\004\000" +
    "\002\011\003\000\002\020\006\000\002\020\006\000\002" +
    "\020\006\000\002\020\006\000\002\020\006\000\002\021" +
    "\004\000\002\023\005\000\002\023\002\000\002\022\004" +
    "\000\002\024\005\000\002\024\002\000\002\026\003\000" +
    "\002\026\003\000\002\027\003\000\002\027\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\005\000\002\042" +
    "\010\000\002\043\016\000\002\045\012\000\002\044\006" +
    "\000\002\044\002\000\002\034\013\000\002\035\007\000" +
    "\002\035\002\000\002\036\004\000\002\036\002\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\003\000\002\040\005\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\052\002\000\002\030\007\000" +
    "\002\031\005\000\002\031\003\000\002\031\005\000\002" +
    "\031\003\000\002\031\005\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\004\063\004\001\002\000\004\153\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\044\010\001\002\000\010\016\015\036\020\153" +
    "\016\001\002\000\010\016\uffe6\036\020\153\016\001\002" +
    "\000\004\016\307\001\002\000\010\016\uffea\036\020\153" +
    "\016\001\002\000\010\016\uffe8\036\020\153\016\001\002" +
    "\000\016\035\044\041\051\046\047\111\041\147\043\153" +
    "\055\001\002\000\006\131\257\135\260\001\002\000\004" +
    "\002\001\001\002\000\004\153\021\001\002\000\004\125" +
    "\ufffa\001\002\000\004\125\023\001\002\000\004\153\245" +
    "\001\002\000\004\073\ufff9\001\002\000\004\073\026\001" +
    "\002\000\014\142\033\143\030\144\032\145\034\146\031" +
    "\001\002\000\004\044\ufff8\001\002\000\010\044\uffef\126" +
    "\uffef\137\uffef\001\002\000\010\044\uffec\126\uffec\137\uffec" +
    "\001\002\000\010\044\uffee\126\uffee\137\uffee\001\002\000" +
    "\010\044\ufff0\126\ufff0\137\ufff0\001\002\000\010\044\uffed" +
    "\126\uffed\137\uffed\001\002\000\004\044\036\001\002\000" +
    "\006\036\020\153\016\001\002\000\004\016\040\001\002" +
    "\000\016\035\044\041\051\046\047\111\041\147\043\153" +
    "\055\001\002\000\010\151\064\152\066\153\145\001\002" +
    "\000\004\031\233\001\002\000\004\125\226\001\002\000" +
    "\004\153\213\001\002\000\026\027\uffdd\030\uffdd\031\uffdd" +
    "\034\uffdd\035\044\041\051\046\047\111\041\147\043\153" +
    "\055\001\002\000\004\137\210\001\002\000\016\035\044" +
    "\041\051\046\047\111\041\147\043\153\055\001\002\000" +
    "\026\027\uffd3\030\uffd3\031\uffd3\034\uffd3\035\044\041\051" +
    "\046\047\111\041\147\043\153\055\001\002\000\010\151" +
    "\064\152\066\153\145\001\002\000\026\027\uffd7\030\uffd7" +
    "\031\uffd7\034\uffd7\035\044\041\051\046\047\111\041\147" +
    "\043\153\055\001\002\000\026\027\uffd5\030\uffd5\031\uffd5" +
    "\034\uffd5\035\044\041\051\046\047\111\041\147\043\153" +
    "\055\001\002\000\004\137\136\001\002\000\006\117\060" +
    "\125\uffac\001\002\000\026\027\uffd1\030\uffd1\031\uffd1\034" +
    "\uffd1\035\044\041\051\046\047\111\041\147\043\153\055" +
    "\001\002\000\012\027\uffd2\030\uffd2\031\uffd2\034\uffd2\001" +
    "\002\000\020\125\105\140\101\141\102\151\064\152\066" +
    "\153\107\154\100\001\002\000\004\125\062\001\002\000" +
    "\012\151\064\152\066\153\067\154\070\001\002\000\004" +
    "\126\077\001\002\000\036\013\uffe0\046\uffe0\054\uffe0\104" +
    "\uffe0\113\uffe0\115\uffe0\122\uffe0\126\uffe0\127\uffe0\130\uffe0" +
    "\131\uffe0\132\uffe0\134\uffe0\137\uffe0\001\002\000\006\126" +
    "\uffa7\131\075\001\002\000\036\013\uffdf\046\uffdf\054\uffdf" +
    "\104\uffdf\113\uffdf\115\uffdf\122\uffdf\126\uffdf\127\uffdf\130" +
    "\uffdf\131\uffdf\132\uffdf\134\uffdf\137\uffdf\001\002\000\006" +
    "\126\uffa9\131\073\001\002\000\006\126\uffa5\131\071\001" +
    "\002\000\012\151\064\152\066\153\067\154\070\001\002" +
    "\000\004\126\uffa6\001\002\000\012\151\064\152\066\153" +
    "\067\154\070\001\002\000\004\126\uffaa\001\002\000\012" +
    "\151\064\152\066\153\067\154\070\001\002\000\004\126" +
    "\uffa8\001\002\000\020\013\uffab\046\uffab\054\uffab\104\uffab" +
    "\113\uffab\122\uffab\137\uffab\001\002\000\004\137\135\001" +
    "\002\000\004\137\134\001\002\000\004\137\133\001\002" +
    "\000\004\137\132\001\002\000\016\126\uffc6\127\126\130" +
    "\uffc6\132\uffc6\134\125\137\uffc6\001\002\000\012\125\105" +
    "\151\064\152\066\153\120\001\002\000\016\126\uffc0\127" +
    "\uffc0\130\uffc0\132\uffc0\134\uffc0\137\uffc0\001\002\000\016" +
    "\125\uffac\127\uffc1\130\uffc1\132\uffc1\134\uffc1\137\uffc1\001" +
    "\002\000\012\126\uffc9\130\115\132\116\137\uffc9\001\002" +
    "\000\004\137\112\001\002\000\026\027\uffd0\030\uffd0\031" +
    "\uffd0\034\uffd0\035\uffd0\041\uffd0\046\uffd0\111\uffd0\147\uffd0" +
    "\153\uffd0\001\002\000\006\126\uffcb\137\uffcb\001\002\000" +
    "\012\125\105\151\064\152\066\153\120\001\002\000\012" +
    "\125\uffc5\151\uffc5\152\uffc5\153\uffc5\001\002\000\012\125" +
    "\uffc4\151\uffc4\152\uffc4\153\uffc4\001\002\000\012\126\uffc9" +
    "\130\115\132\116\137\uffc9\001\002\000\016\126\uffc1\127" +
    "\uffc1\130\uffc1\132\uffc1\134\uffc1\137\uffc1\001\002\000\006" +
    "\126\uffca\137\uffca\001\002\000\004\126\123\001\002\000" +
    "\016\126\uffbf\127\uffbf\130\uffbf\132\uffbf\134\uffbf\137\uffbf" +
    "\001\002\000\012\125\105\151\064\152\066\153\120\001" +
    "\002\000\012\125\uffc2\151\uffc2\152\uffc2\153\uffc2\001\002" +
    "\000\012\125\uffc3\151\uffc3\152\uffc3\153\uffc3\001\002\000" +
    "\012\126\uffc8\130\uffc8\132\uffc8\137\uffc8\001\002\000\016" +
    "\126\uffc6\127\126\130\uffc6\132\uffc6\134\125\137\uffc6\001" +
    "\002\000\012\126\uffc7\130\uffc7\132\uffc7\137\uffc7\001\002" +
    "\000\026\027\uffcf\030\uffcf\031\uffcf\034\uffcf\035\uffcf\041" +
    "\uffcf\046\uffcf\111\uffcf\147\uffcf\153\uffcf\001\002\000\026" +
    "\027\uffcc\030\uffcc\031\uffcc\034\uffcc\035\uffcc\041\uffcc\046" +
    "\uffcc\111\uffcc\147\uffcc\153\uffcc\001\002\000\026\027\uffcd" +
    "\030\uffcd\031\uffcd\034\uffcd\035\uffcd\041\uffcd\046\uffcd\111" +
    "\uffcd\147\uffcd\153\uffcd\001\002\000\026\027\uffce\030\uffce" +
    "\031\uffce\034\uffce\035\uffce\041\uffce\046\uffce\111\uffce\147" +
    "\uffce\153\uffce\001\002\000\026\027\uffdb\030\uffdb\031\uffdb" +
    "\034\uffdb\035\044\041\051\046\047\111\041\147\043\153" +
    "\055\001\002\000\012\027\uffdc\030\uffdc\031\uffdc\034\uffdc" +
    "\001\002\000\012\027\uffd6\030\uffd6\031\uffd6\034\uffd6\001" +
    "\002\000\012\027\uffd8\030\uffd8\031\uffd8\034\uffd8\001\002" +
    "\000\004\122\174\001\002\000\020\013\uffae\046\uffae\054" +
    "\uffae\104\uffae\113\uffae\122\uffae\137\uffae\001\002\000\016" +
    "\013\166\046\uffb1\054\167\104\uffb1\113\170\137\uffb1\001" +
    "\002\000\022\013\uffaf\046\uffaf\054\uffaf\104\uffaf\113\uffaf" +
    "\122\uffaf\125\uffac\137\uffaf\001\002\000\004\104\150\001" +
    "\002\000\020\013\uffad\046\uffad\054\uffad\104\uffad\113\uffad" +
    "\122\uffad\137\uffad\001\002\000\016\035\044\041\051\046" +
    "\047\111\041\147\043\153\055\001\002\000\010\027\uffb7" +
    "\030\153\031\uffb7\001\002\000\006\027\160\031\uffb5\001" +
    "\002\000\010\151\064\152\066\153\145\001\002\000\004" +
    "\104\155\001\002\000\016\035\044\041\051\046\047\111" +
    "\041\147\043\153\055\001\002\000\010\027\uffb7\030\153" +
    "\031\uffb7\001\002\000\006\027\uffb8\031\uffb8\001\002\000" +
    "\016\035\044\041\051\046\047\111\041\147\043\153\055" +
    "\001\002\000\004\031\162\001\002\000\004\041\163\001" +
    "\002\000\004\137\164\001\002\000\026\027\uffb9\030\uffb9" +
    "\031\uffb9\034\uffb9\035\uffb9\041\uffb9\046\uffb9\111\uffb9\147" +
    "\uffb9\153\uffb9\001\002\000\004\031\uffb6\001\002\000\010" +
    "\151\064\152\066\153\145\001\002\000\010\151\064\152" +
    "\066\153\145\001\002\000\010\151\064\152\066\153\145" +
    "\001\002\000\010\046\uffb2\104\uffb2\137\uffb2\001\002\000" +
    "\010\046\uffb4\104\uffb4\137\uffb4\001\002\000\010\046\uffb3" +
    "\104\uffb3\137\uffb3\001\002\000\010\151\064\152\066\153" +
    "\145\001\002\000\016\013\uffb0\046\uffb0\054\uffb0\104\uffb0" +
    "\113\uffb0\137\uffb0\001\002\000\012\027\uffd4\030\uffd4\031" +
    "\uffd4\034\uffd4\001\002\000\006\031\uffba\034\201\001\002" +
    "\000\004\031\205\001\002\000\004\110\202\001\002\000" +
    "\010\151\064\152\066\153\145\001\002\000\004\137\204" +
    "\001\002\000\004\031\uffbb\001\002\000\004\046\206\001" +
    "\002\000\004\137\207\001\002\000\026\027\uffbe\030\uffbe" +
    "\031\uffbe\034\uffbe\035\uffbe\041\uffbe\046\uffbe\111\uffbe\147" +
    "\uffbe\153\uffbe\001\002\000\026\027\uffd9\030\uffd9\031\uffd9" +
    "\034\uffd9\035\044\041\051\046\047\111\041\147\043\153" +
    "\055\001\002\000\012\027\uffda\030\uffda\031\uffda\034\uffda" +
    "\001\002\000\012\027\uffde\030\uffde\031\uffde\034\uffde\001" +
    "\002\000\004\042\214\001\002\000\006\151\064\152\066" +
    "\001\002\000\004\115\216\001\002\000\006\151\064\152" +
    "\066\001\002\000\004\046\220\001\002\000\016\035\044" +
    "\041\051\046\047\111\041\147\043\153\055\001\002\000" +
    "\006\031\uffba\034\201\001\002\000\004\031\223\001\002" +
    "\000\004\046\224\001\002\000\004\137\225\001\002\000" +
    "\026\027\uffbd\030\uffbd\031\uffbd\034\uffbd\035\uffbd\041\uffbd" +
    "\046\uffbd\111\uffbd\147\uffbd\153\uffbd\001\002\000\010\151" +
    "\064\152\066\154\230\001\002\000\004\126\ufffc\001\002" +
    "\000\004\126\ufffb\001\002\000\004\126\232\001\002\000" +
    "\004\137\ufffd\001\002\000\004\137\234\001\002\000\010" +
    "\016\ufff7\036\ufff7\153\ufff7\001\002\000\004\046\236\001" +
    "\002\000\016\035\044\041\051\046\047\111\041\147\043" +
    "\153\055\001\002\000\006\031\uffba\034\201\001\002\000" +
    "\004\031\241\001\002\000\004\046\242\001\002\000\004" +
    "\137\243\001\002\000\026\027\uffbc\030\uffbc\031\uffbc\034" +
    "\uffbc\035\uffbc\041\uffbc\046\uffbc\111\uffbc\147\uffbc\153\uffbc" +
    "\001\002\000\004\135\252\001\002\000\006\131\250\135" +
    "\ufff1\001\002\000\004\126\247\001\002\000\004\073\ufff6" +
    "\001\002\000\004\153\245\001\002\000\004\135\ufff2\001" +
    "\002\000\014\142\033\143\030\144\032\145\034\146\031" +
    "\001\002\000\006\126\ufff3\137\254\001\002\000\004\153" +
    "\ufff5\001\002\000\004\153\245\001\002\000\004\126\ufff4" +
    "\001\002\000\004\153\277\001\002\000\016\014\262\142" +
    "\033\143\030\144\032\145\034\146\031\001\002\000\004" +
    "\137\275\001\002\000\004\125\263\001\002\000\020\142" +
    "\033\143\030\144\032\145\034\146\031\151\064\152\066" +
    "\001\002\000\004\126\uffe2\001\002\000\004\126\271\001" +
    "\002\000\004\115\267\001\002\000\006\151\064\152\066" +
    "\001\002\000\004\126\uffe1\001\002\000\004\053\272\001" +
    "\002\000\014\142\033\143\030\144\032\145\034\146\031" +
    "\001\002\000\004\137\274\001\002\000\010\016\uffe3\036" +
    "\uffe3\153\uffe3\001\002\000\010\016\uffe4\036\uffe4\153\uffe4" +
    "\001\002\000\010\016\uffe5\036\uffe5\153\uffe5\001\002\000" +
    "\006\131\257\135\300\001\002\000\014\142\033\143\030" +
    "\144\032\145\034\146\031\001\002\000\004\031\302\001" +
    "\002\000\004\153\303\001\002\000\004\137\304\001\002" +
    "\000\004\002\ufffe\001\002\000\004\016\uffe9\001\002\000" +
    "\004\016\uffeb\001\002\000\016\035\044\041\051\046\047" +
    "\111\041\147\043\153\055\001\002\000\004\031\311\001" +
    "\002\000\004\153\312\001\002\000\004\137\313\001\002" +
    "\000\004\002\uffff\001\002\000\004\016\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\010\005\016\010\011\014\012\015\013\001\001\000" +
    "\012\004\010\010\313\014\012\015\013\001\001\000\002" +
    "\001\001\000\012\004\010\010\305\014\012\015\013\001" +
    "\001\000\012\004\010\010\304\014\012\015\013\001\001" +
    "\000\022\011\300\020\044\030\053\032\045\034\051\042" +
    "\052\043\047\045\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\021\001\001\000" +
    "\004\006\023\001\001\000\006\012\245\013\243\001\001" +
    "\000\004\047\024\001\001\000\002\001\001\000\004\007" +
    "\026\001\001\000\004\050\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\010\010\036" +
    "\014\012\015\013\001\001\000\002\001\001\000\022\011" +
    "\041\020\044\030\053\032\045\034\051\042\052\043\047" +
    "\045\055\001\001\000\014\017\142\030\146\037\234\040" +
    "\143\041\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\011\211\020\044\030\053\032" +
    "\045\034\051\042\052\043\047\045\055\001\001\000\002" +
    "\001\001\000\022\011\176\020\044\030\053\032\045\034" +
    "\051\042\052\043\047\045\055\001\001\000\022\011\175" +
    "\020\044\030\053\032\045\034\051\042\052\043\047\045" +
    "\055\001\001\000\014\017\142\030\146\037\145\040\143" +
    "\041\141\001\001\000\022\011\140\020\044\030\053\032" +
    "\045\034\051\042\052\043\047\045\055\001\001\000\022" +
    "\011\137\020\044\030\053\032\045\034\051\042\052\043" +
    "\047\045\055\001\001\000\002\001\001\000\004\052\060" +
    "\001\001\000\022\011\056\020\044\030\053\032\045\034" +
    "\051\042\052\043\047\045\055\001\001\000\002\001\001" +
    "\000\014\017\105\021\110\022\107\025\103\030\102\001" +
    "\001\000\002\001\001\000\006\017\064\031\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\064\031\071\001\001\000\002\001\001\000\006\017" +
    "\064\031\073\001\001\000\002\001\001\000\006\017\064" +
    "\031\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\126\027\123\001\001\000\012\017" +
    "\105\021\121\022\107\025\103\001\001\000\002\001\001" +
    "\000\004\052\060\001\001\000\006\023\112\026\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\105\022\116\025\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\120\026\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\105\025\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\130\027\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\011\136\020\044\030\053\032\045\034\051\042\052" +
    "\043\047\045\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\011\150\020\044\030\053" +
    "\032\045\034\051\042\052\043\047\045\055\001\001\000" +
    "\004\035\151\001\001\000\004\036\160\001\001\000\014" +
    "\017\142\030\146\037\153\040\143\041\141\001\001\000" +
    "\002\001\001\000\022\011\155\020\044\030\053\032\045" +
    "\034\051\042\052\043\047\045\055\001\001\000\004\035" +
    "\156\001\001\000\002\001\001\000\022\011\164\020\044" +
    "\030\053\032\045\034\051\042\052\043\047\045\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\142\030" +
    "\146\037\172\040\143\041\141\001\001\000\014\017\142" +
    "\030\146\037\171\040\143\041\141\001\001\000\014\017" +
    "\142\030\146\037\170\040\143\041\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\142\030\146\041\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\142\030\146\037\202\040\143" +
    "\041\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\011\210\020\044\030\053\032\045\034\051\042\052\043" +
    "\047\045\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\214\001\001\000\002\001" +
    "\001\000\004\017\216\001\001\000\002\001\001\000\022" +
    "\011\220\020\044\030\053\032\045\034\051\042\052\043" +
    "\047\045\055\001\001\000\004\044\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\226\033\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\011\236\020\044\030\053\032\045\034\051\042\052\043" +
    "\047\045\055\001\001\000\004\044\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\250\001\001\000\002\001" +
    "\001\000\004\007\252\001\001\000\002\001\001\000\004" +
    "\051\254\001\001\000\006\012\255\013\243\001\001\000" +
    "\002\001\001\000\004\014\275\001\001\000\004\007\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\263\016\264\017\265\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\011\307\020\044\030\053\032\045\034\051\042\052\043" +
    "\047\045\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1


  for (DataType dt : DataType.values()) 
	  variables.put(dt, new HashMap<String, Object>());
  
  for (DataType dt : DataType.values()) 
	  functions.put(dt, new HashMap<String, ArrayList<DataType>>());

  ComplexSymbolFactory c = new ComplexSymbolFactory();
  symbolFactory = c;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(c,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG3
 return lexer.next_token(); 
    }

//@@CUPDBG0

  protected Lexer lexer;
  protected HashMap<DataType, HashMap<String, Object>> variables = new HashMap<DataType, HashMap<String, Object>>();
  protected HashMap<DataType, HashMap<String, ArrayList<DataType>>> functions = new HashMap<DataType, HashMap<String,ArrayList<DataType>>>();
  
  enum DataType{
	  INT_ADA, FLOAT_ADA, STRING_ADA, BOOL_ADA, CHAR_ADA;
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

//@@CUPDBG2

	protected DataType type = DataType.BOOL_ADA;
	protected ArrayList<DataType> param = new ArrayList<DataType>();
	protected String gbName;
	protected DataType gbReturnType, gbType;
	protected ArrayList<DataType> gbParameters = new ArrayList<DataType>();
	protected ArrayList<String> paramList = new ArrayList<String>();
	protected Object gbContent;

	public void declareFunction(String name, DataType returnType, ArrayList<DataType> parameters) {
		//System.out.println("$$$ " + returnType + " " +name + " function declared " + parameters.toString());
		functions.get(returnType).put(name, parameters);
	}
	
	public boolean functionIsDeclared(String name, ArrayList<DataType> parameters) {
		for (DataType declaredReturnType : DataType.values()) {
			for (Map.Entry<String, ArrayList<DataType>> eachFunction : functions.get(declaredReturnType).entrySet()) {
				if (eachFunction.getKey().equals(name)) {
					if(eachFunction.getValue().size() == parameters.size()) {
						for (int i = 0; i < eachFunction.getValue().size(); i++) {
							//System.out.println(eachFunction.getValue().get(i) + " ++++++");
							//System.out.println(parameters.get(i) + " ******");
							if (eachFunction.getValue().get(eachFunction.getValue().size() - i - 1) != parameters.get(i))
								return false;
						}
						return true;
					}
				}
			}
		}
		return false;
	}

	public void declareVariable(DataType dt, String name, Object value) {
		System.out.println(name + " declared as " + dt + " = " + value);
		switch (dt) {
		case BOOL_ADA:
			variables.get(dt).put(name, (Boolean)value);
			break;
		case CHAR_ADA:
			variables.get(dt).put(name, (Character)value);
			break;
		case FLOAT_ADA:
			variables.get(dt).put(name, (Float)value);
			break;
		case INT_ADA:
			variables.get(dt).put(name, (Integer)value); // TODO: specific decimal literal in ada
			break;
		case STRING_ADA:
			variables.get(dt).put(name, (String)value);
			break;
		default:
			break;
		}
	}

	public boolean inSameType(String first, String second) {
		for (DataType dt : DataType.values()) {
			if(variables.get(dt).containsKey(first) && variables.get(dt).containsKey(second))
				return true;
		}	
		return false;
	}

	public boolean checkType(String name, DataType dt) {
		return variables.get(dt).containsKey(name);
	}

	public boolean declaredBefore(String name) {
		for (DataType dt : DataType.values()) {
			if(variables.get(dt).containsKey(name))
				return true;
		}	
		return false;
	}
	
	public void assignVariable(String name, Object value) {
		for (DataType dt : DataType.values()) {
			variables.get(dt).replace(name, value);
		}
	}

	public DataType getTypeOf(String name) {
		for (DataType dt : DataType.values()) {
			if(variables.get(dt).containsKey(name))
				return dt;
		}
		return null;
	}

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // main_body ::= PROCEDURE IDENTIFIER IS main_statements 
            {
              Object RESULT =null;
		//@@CUPDBG4
	System.out.println("parsed successfully"); 
								System.out.println(variables.toString());
								System.out.println(functions.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= main_body EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_statements ::= primary_statements BEGIN body_statements END IDENTIFIER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_statements",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_statements ::= BEGIN body_statements END IDENTIFIER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_statements",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // put_statements ::= PUT OPARENTHESIS put_content CPARENTHESIS 
            {
              Object RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG5
 System.out.println("##### " + p + " #####"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("put_statements",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // put_content ::= number_format 
            {
              Object RESULT =null;
		Location nfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6
 RESULT = nf; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("put_content",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // put_content ::= STR 
            {
              Object RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG7
 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("put_content",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
//@@CUPDBG8
 gbName = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
//@@CUPDBG9
 gbParameters = param; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
//@@CUPDBG10
 gbReturnType = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func_statements ::= FUNCTION IDENTIFIER NT$0 arguments NT$1 RETURN ada_type NT$2 IS primary_statements BEGIN body_statements END SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		//@@CUPDBG11
 declareFunction(gbName, gbReturnType, new ArrayList<DataType>(gbParameters)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_statements",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // arguments ::= OPARENTHESIS declare_arguments CPARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$3 ::= 
            {
              Object RESULT =null;
//@@CUPDBG12
	for (String paramId : paramList) {
									declareVariable(type, paramId, null);
									param.add(type);
								}
								paramList.clear();
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declare_arguments ::= identifiers_list COLON ada_type SEMI NT$3 declare_arguments 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declare_arguments",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declare_arguments ::= identifiers_list COLON ada_type 
            {
              Object RESULT =null;
		//@@CUPDBG13
	for (String paramId : paramList) {
									declareVariable(type, paramId, null);
									param.add(type);
								}
								paramList.clear();
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declare_arguments",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // identifiers_list ::= IDENTIFIER COMMA identifiers_list 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG14
	paramList.add(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifiers_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // identifiers_list ::= IDENTIFIER 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG15
	paramList.add(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifiers_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ada_type ::= INT 
            {
              Object RESULT =null;
		//@@CUPDBG16
 type = DataType.INT_ADA; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ada_type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ada_type ::= FLOAT 
            {
              Object RESULT =null;
		//@@CUPDBG17
 type = DataType.FLOAT_ADA; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ada_type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ada_type ::= BOOLEAN 
            {
              Object RESULT =null;
		//@@CUPDBG18
 type = DataType.BOOL_ADA; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ada_type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ada_type ::= STR_TYP 
            {
              Object RESULT =null;
		//@@CUPDBG19
 type = DataType.STRING_ADA; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ada_type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ada_type ::= CHAR 
            {
              Object RESULT =null;
		//@@CUPDBG20
 type = DataType.CHAR_ADA; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ada_type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // primary_statements ::= declare_variables primary_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_statements",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // primary_statements ::= declare_variables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_statements",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // primary_statements ::= declare_array primary_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_statements",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // primary_statements ::= declare_array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_statements",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // primary_statements ::= func_statements primary_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_statements",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // primary_statements ::= func_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_statements",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declare_variables ::= IDENTIFIER COMMA declare_variables 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG21
	declareVariable(type, id, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declare_variables",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declare_variables ::= IDENTIFIER COLON ada_type SEMI 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG22
	declareVariable(type, id, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declare_variables",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declare_array ::= IDENTIFIER COLON ARRAY OPARENTHESIS array_dim CPARENTHESIS OF ada_type SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declare_array",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // array_dim ::= ada_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_dim",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // array_dim ::= number_format DOUBLE_DOT number_format 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_dim",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // number_format ::= DECIMAL_LITERAL 
            {
              Object RESULT =null;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String dl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG23
	type = DataType.INT_ADA;
								gbContent = dl;
								RESULT = dl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_format",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // number_format ::= BASED_LITERAL 
            {
              Object RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String bl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24
	type = DataType.INT_ADA; 
								gbContent = bl;
								RESULT = bl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_format",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // body_statements ::= assignment body_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_statements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // body_statements ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_statements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // body_statements ::= call_subprogram SEMI body_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_statements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // body_statements ::= call_subprogram SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_statements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // body_statements ::= put_statements SEMI body_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_statements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // body_statements ::= put_statements SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_statements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // body_statements ::= if_statements body_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_statements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // body_statements ::= if_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_statements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // body_statements ::= loop_statements body_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_statements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // body_statements ::= loop_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_statements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // body_statements ::= for_statements body_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_statements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // body_statements ::= for_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_statements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // body_statements ::= while_statements body_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_statements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // body_statements ::= while_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_statements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assignment ::= IDENTIFIER ASSIGNMENT math_expression SEMI 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG25
	type = getTypeOf(id);
								assignVariable(id, gbContent); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assignment ::= IDENTIFIER ASSIGNMENT call_subprogram SEMI 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG26
	type = getTypeOf(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assignment ::= IDENTIFIER ASSIGNMENT STR SEMI 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location contentxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location contentxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String content = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location linexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location linexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27
	if(checkType(id, DataType.STRING_ADA)) {
									assignVariable(id, content);
									System.out.println(id + " <~~~ " + content);
								} else {
									System.err.println(id + " at line " + line + " is not string");
								}
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assignment ::= IDENTIFIER ASSIGNMENT TRUE SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // assignment ::= IDENTIFIER ASSIGNMENT FALSE SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // math_expression ::= a b 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // b ::= low_lvl_op a b 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // a ::= c d 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("a",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // d ::= high_lvl_op c d 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("d",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // d ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("d",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // low_lvl_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("low_lvl_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // low_lvl_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("low_lvl_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // high_lvl_op ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("high_lvl_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // high_lvl_op ::= SLASH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("high_lvl_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // c ::= IDENTIFIER 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG28
	if(!checkType(id, type)){
									System.err.println(id + " should be " + type);
								}
								gbContent = id;
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // c ::= number_format 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // c ::= OPARENTHESIS math_expression CPARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // loop_statements ::= LOOP body_statements exit_cycle END LOOP SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statements",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // for_statements ::= FOR IDENTIFIER IN number_format DOUBLE_DOT number_format LOOP body_statements exit_cycle END LOOP SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statements",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // while_statements ::= WHILE condition LOOP body_statements exit_cycle END LOOP SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statements",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exit_cycle ::= EXIT WHEN condition SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exit_cycle",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exit_cycle ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exit_cycle",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // if_statements ::= IF condition THEN body_statements elsif_statements else_statements END IF SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statements",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // elsif_statements ::= ELSIF condition THEN body_statements elsif_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif_statements",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // elsif_statements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif_statements",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // else_statements ::= ELSE body_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statements",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // else_statements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statements",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // condition ::= boolean_expression OR condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // condition ::= boolean_expression AND condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // condition ::= boolean_expression XOR condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // condition ::= boolean_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // boolean_expression ::= operand COMPARE operand 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operand ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operand",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operand ::= number_format 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operand",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operand ::= call_subprogram 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operand",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$4 ::= 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
//@@CUPDBG29
 param.clear(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // call_subprogram ::= IDENTIFIER NT$4 OPARENTHESIS parameter_values CPARENTHESIS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG30
	
								//System.out.println(functions.toString() + " ***FUNCTIONS***");
								//System.out.println("%%%% " + param.toString() + "%%%%");
								boolean satisfied = false;
								if (functionIsDeclared(id, param))
									satisfied = true;
								//System.out.println("----------- is it satisfied ? " + satisfied);
								if(!satisfied)
									System.err.println(id + " is not declared in this style");
								param.clear();
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_subprogram",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parameter_values ::= IDENTIFIER COMMA parameter_values 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG31
 param.add(getTypeOf(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_values",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parameter_values ::= IDENTIFIER 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG32
 param.add(getTypeOf(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_values",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parameter_values ::= number_format COMMA parameter_values 
            {
              Object RESULT =null;
		//@@CUPDBG33
 param.add(type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_values",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parameter_values ::= number_format 
            {
              Object RESULT =null;
		//@@CUPDBG34
 param.add(type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_values",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parameter_values ::= STR COMMA parameter_values 
            {
              Object RESULT =null;
		//@@CUPDBG35
 param.add(DataType.STRING_ADA); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_values",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parameter_values ::= STR 
            {
              Object RESULT =null;
		//@@CUPDBG36
 param.add(DataType.STRING_ADA); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_values",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
